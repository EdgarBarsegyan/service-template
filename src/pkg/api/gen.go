//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email    openapi_types.Email `json:"email"`
	Username string              `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Details *[]struct {
		Field   *string `json:"field,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PaginationInfo defines model for PaginationInfo.
type PaginationInfo struct {
	Limit      int `json:"limit"`
	Page       int `json:"page"`
	Total      int `json:"total"`
	TotalPages int `json:"total_pages"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Email openapi_types.Email `json:"email"`
}

// User defines model for User.
type User struct {
	ID       openapi_types.UUID `json:"id"`
	Username string             `json:"username"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data *User `json:"data,omitempty"`
}

// UserResponseV2 defines model for UserResponseV2.
type UserResponseV2 struct {
	Data *UserV2 `json:"data,omitempty"`
}

// UserV2 defines model for UserV2.
type UserV2 struct {
	Email    string             `json:"email"`
	ID       openapi_types.UUID `json:"id"`
	Username string             `json:"username"`
}

// UsersListResponse defines model for UsersListResponse.
type UsersListResponse struct {
	Data       []User         `json:"data"`
	Pagination PaginationInfo `json:"pagination"`
}

// UsersListResponseV2 defines model for UsersListResponseV2.
type UsersListResponseV2 struct {
	Data       []UserV2       `json:"data"`
	Pagination PaginationInfo `json:"pagination"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Page page number
	Page int `form:"page" json:"page"`

	// Limit Количество элементов на странице
	Limit int `form:"limit" json:"limit"`
}

// GetV2UsersParams defines parameters for GetV2Users.
type GetV2UsersParams struct {
	// Page Page number
	Page int `form:"page" json:"page"`

	// Limit Page count
	Limit int `form:"limit" json:"limit"`
}

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody = CreateUserRequest

// PutV1UsersIDJSONRequestBody defines body for PutV1UsersID for application/json ContentType.
type PutV1UsersIDJSONRequestBody = UpdateUserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1Users request
	GetV1Users(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1UsersWithBody request with any body
	PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1UsersID request
	DeleteV1UsersID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1UsersID request
	GetV1UsersID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutV1UsersIDWithBody request with any body
	PutV1UsersIDWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutV1UsersID(ctx context.Context, id openapi_types.UUID, body PutV1UsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Users request
	GetV2Users(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1Users(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1UsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Users(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1UsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1UsersID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1UsersIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1UsersID(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1UsersIDRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersIDWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersIDRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutV1UsersID(ctx context.Context, id openapi_types.UUID, body PutV1UsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutV1UsersIDRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Users(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2UsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1UsersRequest generates requests for GetV1Users
func NewGetV1UsersRequest(server string, params *GetV1UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1UsersRequest calls the generic PostV1Users builder with application/json body
func NewPostV1UsersRequest(server string, body PostV1UsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1UsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1UsersRequestWithBody generates requests for PostV1Users with any type of body
func NewPostV1UsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1UsersIDRequest generates requests for DeleteV1UsersID
func NewDeleteV1UsersIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1UsersIDRequest generates requests for GetV1UsersID
func NewGetV1UsersIDRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutV1UsersIDRequest calls the generic PutV1UsersID builder with application/json body
func NewPutV1UsersIDRequest(server string, id openapi_types.UUID, body PutV1UsersIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutV1UsersIDRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutV1UsersIDRequestWithBody generates requests for PutV1UsersID with any type of body
func NewPutV1UsersIDRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV2UsersRequest generates requests for GetV2Users
func NewGetV2UsersRequest(server string, params *GetV2UsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1UsersWithResponse request
	GetV1UsersWithResponse(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*GetV1UsersResponse, error)

	// PostV1UsersWithBodyWithResponse request with any body
	PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error)

	// DeleteV1UsersIDWithResponse request
	DeleteV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1UsersIDResponse, error)

	// GetV1UsersIDWithResponse request
	GetV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1UsersIDResponse, error)

	// PutV1UsersIDWithBodyWithResponse request with any body
	PutV1UsersIDWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersIDResponse, error)

	PutV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, body PutV1UsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersIDResponse, error)

	// GetV2UsersWithResponse request
	GetV2UsersWithResponse(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error)
}

type GetV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersListResponse
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponse
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r PostV1UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1UsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r DeleteV1UsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1UsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1UsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r GetV1UsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1UsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutV1UsersIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON404      *NotFound
}

// Status returns HTTPResponse.Status
func (r PutV1UsersIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutV1UsersIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2UsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersListResponseV2
	JSON400      *BadRequest
}

// Status returns HTTPResponse.Status
func (r GetV2UsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2UsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1UsersWithResponse request returning *GetV1UsersResponse
func (c *ClientWithResponses) GetV1UsersWithResponse(ctx context.Context, params *GetV1UsersParams, reqEditors ...RequestEditorFn) (*GetV1UsersResponse, error) {
	rsp, err := c.GetV1Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersResponse(rsp)
}

// PostV1UsersWithBodyWithResponse request with arbitrary body returning *PostV1UsersResponse
func (c *ClientWithResponses) PostV1UsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1UsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1UsersWithResponse(ctx context.Context, body PostV1UsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1UsersResponse, error) {
	rsp, err := c.PostV1Users(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1UsersResponse(rsp)
}

// DeleteV1UsersIDWithResponse request returning *DeleteV1UsersIDResponse
func (c *ClientWithResponses) DeleteV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteV1UsersIDResponse, error) {
	rsp, err := c.DeleteV1UsersID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1UsersIDResponse(rsp)
}

// GetV1UsersIDWithResponse request returning *GetV1UsersIDResponse
func (c *ClientWithResponses) GetV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetV1UsersIDResponse, error) {
	rsp, err := c.GetV1UsersID(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1UsersIDResponse(rsp)
}

// PutV1UsersIDWithBodyWithResponse request with arbitrary body returning *PutV1UsersIDResponse
func (c *ClientWithResponses) PutV1UsersIDWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutV1UsersIDResponse, error) {
	rsp, err := c.PutV1UsersIDWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersIDResponse(rsp)
}

func (c *ClientWithResponses) PutV1UsersIDWithResponse(ctx context.Context, id openapi_types.UUID, body PutV1UsersIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutV1UsersIDResponse, error) {
	rsp, err := c.PutV1UsersID(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutV1UsersIDResponse(rsp)
}

// GetV2UsersWithResponse request returning *GetV2UsersResponse
func (c *ClientWithResponses) GetV2UsersWithResponse(ctx context.Context, params *GetV2UsersParams, reqEditors ...RequestEditorFn) (*GetV2UsersResponse, error) {
	rsp, err := c.GetV2Users(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2UsersResponse(rsp)
}

// ParseGetV1UsersResponse parses an HTTP response from a GetV1UsersWithResponse call
func ParseGetV1UsersResponse(rsp *http.Response) (*GetV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostV1UsersResponse parses an HTTP response from a PostV1UsersWithResponse call
func ParsePostV1UsersResponse(rsp *http.Response) (*PostV1UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteV1UsersIDResponse parses an HTTP response from a DeleteV1UsersIDWithResponse call
func ParseDeleteV1UsersIDResponse(rsp *http.Response) (*DeleteV1UsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1UsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV1UsersIDResponse parses an HTTP response from a GetV1UsersIDWithResponse call
func ParseGetV1UsersIDResponse(rsp *http.Response) (*GetV1UsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1UsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutV1UsersIDResponse parses an HTTP response from a PutV1UsersIDWithResponse call
func ParsePutV1UsersIDResponse(rsp *http.Response) (*PutV1UsersIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutV1UsersIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetV2UsersResponse parses an HTTP response from a GetV2UsersWithResponse call
func ParseGetV2UsersResponse(rsp *http.Response) (*GetV2UsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2UsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersListResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List users
	// (GET /v1/users)
	GetV1Users(w http.ResponseWriter, r *http.Request, params GetV1UsersParams)
	// Create new user
	// (POST /v1/users)
	PostV1Users(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /v1/users/{id})
	DeleteV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get user by id
	// (GET /v1/users/{id})
	GetV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update user
	// (PUT /v1/users/{id})
	PutV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get users
	// (GET /v2/users)
	GetV2Users(w http.ResponseWriter, r *http.Request, params GetV2UsersParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetV1Users operation middleware
func (siw *ServerInterfaceWrapper) GetV1Users(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1Users(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostV1Users operation middleware
func (siw *ServerInterfaceWrapper) PostV1Users(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Users(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteV1UsersID operation middleware
func (siw *ServerInterfaceWrapper) DeleteV1UsersID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteV1UsersID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV1UsersID operation middleware
func (siw *ServerInterfaceWrapper) GetV1UsersID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV1UsersID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutV1UsersID operation middleware
func (siw *ServerInterfaceWrapper) PutV1UsersID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV1UsersID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetV2Users operation middleware
func (siw *ServerInterfaceWrapper) GetV2Users(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV2UsersParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV2Users(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/users", wrapper.GetV1Users)
	m.HandleFunc("POST "+options.BaseURL+"/v1/users", wrapper.PostV1Users)
	m.HandleFunc("DELETE "+options.BaseURL+"/v1/users/{id}", wrapper.DeleteV1UsersID)
	m.HandleFunc("GET "+options.BaseURL+"/v1/users/{id}", wrapper.GetV1UsersID)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/users/{id}", wrapper.PutV1UsersID)
	m.HandleFunc("GET "+options.BaseURL+"/v2/users", wrapper.GetV2Users)

	return m
}

type BadRequestJSONResponse Error

type NotFoundJSONResponse Error

type UnauthorizedJSONResponse Error

type GetV1UsersRequestObject struct {
	Params GetV1UsersParams
}

type GetV1UsersResponseObject interface {
	VisitGetV1UsersResponse(w http.ResponseWriter) error
}

type GetV1Users200JSONResponse UsersListResponse

func (response GetV1Users200JSONResponse) VisitGetV1UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1Users400JSONResponse struct{ BadRequestJSONResponse }

func (response GetV1Users400JSONResponse) VisitGetV1UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostV1UsersRequestObject struct {
	Body *PostV1UsersJSONRequestBody
}

type PostV1UsersResponseObject interface {
	VisitPostV1UsersResponse(w http.ResponseWriter) error
}

type PostV1Users201JSONResponse UserResponse

func (response PostV1Users201JSONResponse) VisitPostV1UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostV1Users400JSONResponse struct{ BadRequestJSONResponse }

func (response PostV1Users400JSONResponse) VisitPostV1UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteV1UsersIDRequestObject struct {
	ID openapi_types.UUID `json:"id"`
}

type DeleteV1UsersIDResponseObject interface {
	VisitDeleteV1UsersIDResponse(w http.ResponseWriter) error
}

type DeleteV1UsersID204Response struct {
}

func (response DeleteV1UsersID204Response) VisitDeleteV1UsersIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteV1UsersID404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteV1UsersID404JSONResponse) VisitDeleteV1UsersIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV1UsersIDRequestObject struct {
	ID openapi_types.UUID `json:"id"`
}

type GetV1UsersIDResponseObject interface {
	VisitGetV1UsersIDResponse(w http.ResponseWriter) error
}

type GetV1UsersID200JSONResponse UserResponse

func (response GetV1UsersID200JSONResponse) VisitGetV1UsersIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV1UsersID404JSONResponse struct{ NotFoundJSONResponse }

func (response GetV1UsersID404JSONResponse) VisitGetV1UsersIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutV1UsersIDRequestObject struct {
	ID   openapi_types.UUID `json:"id"`
	Body *PutV1UsersIDJSONRequestBody
}

type PutV1UsersIDResponseObject interface {
	VisitPutV1UsersIDResponse(w http.ResponseWriter) error
}

type PutV1UsersID200JSONResponse UserResponse

func (response PutV1UsersID200JSONResponse) VisitPutV1UsersIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutV1UsersID404JSONResponse struct{ NotFoundJSONResponse }

func (response PutV1UsersID404JSONResponse) VisitPutV1UsersIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetV2UsersRequestObject struct {
	Params GetV2UsersParams
}

type GetV2UsersResponseObject interface {
	VisitGetV2UsersResponse(w http.ResponseWriter) error
}

type GetV2Users200JSONResponse UsersListResponseV2

func (response GetV2Users200JSONResponse) VisitGetV2UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetV2Users400JSONResponse struct{ BadRequestJSONResponse }

func (response GetV2Users400JSONResponse) VisitGetV2UsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List users
	// (GET /v1/users)
	GetV1Users(ctx context.Context, request GetV1UsersRequestObject) (GetV1UsersResponseObject, error)
	// Create new user
	// (POST /v1/users)
	PostV1Users(ctx context.Context, request PostV1UsersRequestObject) (PostV1UsersResponseObject, error)
	// Delete user
	// (DELETE /v1/users/{id})
	DeleteV1UsersID(ctx context.Context, request DeleteV1UsersIDRequestObject) (DeleteV1UsersIDResponseObject, error)
	// Get user by id
	// (GET /v1/users/{id})
	GetV1UsersID(ctx context.Context, request GetV1UsersIDRequestObject) (GetV1UsersIDResponseObject, error)
	// Update user
	// (PUT /v1/users/{id})
	PutV1UsersID(ctx context.Context, request PutV1UsersIDRequestObject) (PutV1UsersIDResponseObject, error)
	// Get users
	// (GET /v2/users)
	GetV2Users(ctx context.Context, request GetV2UsersRequestObject) (GetV2UsersResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetV1Users operation middleware
func (sh *strictHandler) GetV1Users(w http.ResponseWriter, r *http.Request, params GetV1UsersParams) {
	var request GetV1UsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1Users(ctx, request.(GetV1UsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1Users")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1UsersResponseObject); ok {
		if err := validResponse.VisitGetV1UsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostV1Users operation middleware
func (sh *strictHandler) PostV1Users(w http.ResponseWriter, r *http.Request) {
	var request PostV1UsersRequestObject

	var body PostV1UsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostV1Users(ctx, request.(PostV1UsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostV1Users")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostV1UsersResponseObject); ok {
		if err := validResponse.VisitPostV1UsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteV1UsersID operation middleware
func (sh *strictHandler) DeleteV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteV1UsersIDRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteV1UsersID(ctx, request.(DeleteV1UsersIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteV1UsersID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteV1UsersIDResponseObject); ok {
		if err := validResponse.VisitDeleteV1UsersIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV1UsersID operation middleware
func (sh *strictHandler) GetV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetV1UsersIDRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV1UsersID(ctx, request.(GetV1UsersIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV1UsersID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV1UsersIDResponseObject); ok {
		if err := validResponse.VisitGetV1UsersIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutV1UsersID operation middleware
func (sh *strictHandler) PutV1UsersID(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request PutV1UsersIDRequestObject

	request.ID = id

	var body PutV1UsersIDJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutV1UsersID(ctx, request.(PutV1UsersIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutV1UsersID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutV1UsersIDResponseObject); ok {
		if err := validResponse.VisitPutV1UsersIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetV2Users operation middleware
func (sh *strictHandler) GetV2Users(w http.ResponseWriter, r *http.Request, params GetV2UsersParams) {
	var request GetV2UsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetV2Users(ctx, request.(GetV2UsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetV2Users")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetV2UsersResponseObject); ok {
		if err := validResponse.VisitGetV2UsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RY327bthd+FYG/36VSy66Tdr5auqSdh8IOkjgDFgQBIx3H7CRRJam2XiCg7cU2YNgL",
	"DNjVXqAoYKxDl/QVqDcaSCqy/jk2kqzt7izq6OP5852Phz5DLg0iGkIoOOqdIQY8oiEH/fAAe7vwNAYu",
	"1JNLQwGh/omjyCcuFoSGrSechmoNXuAg8sFYeoB66GDzcX9rc78/HBxv7+4Od5GNPBCY+Bz1Ds/QmIDv",
	"oR6CABMf2SgAzvGp+rAfupQxcIWl31keFhglR80mzHiYGdmIuxMIsHLj/wzGqIf+15qH2DJveWubMcpQ",
	"kiTKJ+4yEqlgUA/J3+VMvpWz9KU8T3+Rf1nyT/lGfkhfyov0lcIfUPGQxqF3rZSM9rZ3jwfD/eOHw9Fg",
	"q5SQUngjDswKqbDGequbhzUoYo1CHIsJZeQHuGYYg83R/tfD3f5321cEMQDwLEGty8006i3EUnI/yfE0",
	"Zb9igAWo9BWYGzEaARPEsNrwrRgXijmwL7PHOy4NkI3GlAVYFOgpppEy5YKR8FRFoT4KcQBlqD0awECt",
	"1r5IbKS4SphK+mGOm8Mc5V/QkyfgCrWHyUEtBFOG4rYNvVZzOC/TGSICAl7HzVqyCLww/LzORet5W5r8",
	"WXRsLUBIGsLNFjBjeLrCHrrlVwLewack1Pzrh2NaD9wnARGlbdadHIaEAk6BKZyo6k27yUpQgcsMazvO",
	"QsNjBcpL5p26cYU9ZovMITvzvwzYxKdR5H2c9mgke6NHHBoITiosbHfuQnd9494a3P/iZK3d8e6u4e76",
	"xlq3s7HR7rbvdR3HKXoVx8T7F3pWg17ZsCa15gyth6UJu0T2dEIaSVzEPuhcH/2gsxjf4GLfH471Ib3c",
	"U3sFAgngokKg6/HlKHOTPyZcLM9zLnMrhFETnyjXjGUIFXWpBpPJVAFvEXNKYV1V4pUDU7X+xKGpAxrc",
	"mBEx3VOo2WwJmAHbjMVEPZ3op4eX7fvNt/uoeuqbNe2XQjdfzIk0ESIywwLJFF5NNdgVBUoiHkcRZVUq",
	"GkFAmzt9a88YoNrMsQ9B5GMBFgf2jLigzjfraUzc7y0t0cxEbyNBhNEUY7cmsg+RjZ4B4watfce546hN",
	"aAQhjgjqobt6SaVSTHSCWs/aLSU1+uEUdBxlnxRZLGOikYwPfTVTPwJx0B5lryLMcABCQx1WQdRZYYVx",
	"cKKTSdTS0xjYdJ6X7IiZl12wGIpDnAdjHPtCH4YBCUkQB40Ho5KKyrD9m7yQ7+W79Cc5S1+lr+VbeWGl",
	"v8r3cib/ljN5nr6WF/KtJc/lG0sZpC/lG3ku36U/ytkCdy+PwhX87Tg2CvCLzGF1RF/p/pFdvh51HGeF",
	"6Xm1Ybcuag2D717susC5Ik7X7N0EmfvYKtzfdBfGQYDZtMocgU8VMYwAIaWwEeUNdDOjtRXCc/1pjXM7",
	"lBdIl13LHlBvemtJqg/3SVmQVKWTWpXat1qlqwqkr22u9tK7eZXqCa+WKrHnMtE6I15iquaDgHr9tHPm",
	"pVcr3pZez8rX31qmGhpLT0PEiIiYzDtQry9uvyVDWkObdevBlFqhuzzJ+a29nGIT9qL02s26+whM81gn",
	"U5ODRdr7ueXR+WiNcEvlqWW6QavihgqZa84CmYo/o/LcvkbWb3graeR/jhrlEjcKY2fJ/HTJrubxqbPS",
	"+LTzKccnvblL41DcfBZaL85Cnc9rFtIX1vo/tX+kr+QHOUt/XvBP7c1O3yI7avQq3Gk0KYq3mcMjlR11",
	"T7ikTMz87IbSa7V86mJ/Qrno3XfuO/pv7Qy+Wt7hJSet50RMcmey2hpfkqPknwAAAP//snD62cMXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
