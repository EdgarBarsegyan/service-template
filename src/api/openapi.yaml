openapi: 3.0.0
info:
  title: Service-template
  description: Template service for quick integration
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080

tags:
  - name: Users
    description: Operation with users

paths:
  /v1/users:
    get:
      tags:
        - Users
      summary: List users
      description: List users
      parameters:
        - name: page
          in: query
          description: page number
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Количество элементов на странице
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

    post:
      tags:
        - Users
      summary: Create new user
      description: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by id
      description: Get user by id
      parameters:
        - name: id
          in: path
          required: true
          description: User id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Users
      summary: Update user
      description: Update user
      parameters:
        - name: id
          in: path
          required: true
          description: User id
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      tags:
        - Users
      summary: Delete user
      description: User deleted
      parameters:
        - name: id
          required: true
          in: path
          description: User id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "404":
          $ref: "#/components/responses/NotFound"

  # Версия v2 с улучшенным API
  /v2/users:
    get:
      tags:
        - Users
      summary: Get users
      description: Get users
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Page count
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        "200":
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListResponseV2"
        "400":
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "SomeName"
      required:
        - id
        - username

    UserV2:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            email:
              type: string
              example: "test@example.com"
          required:
            - email

    CreateUserRequest:
      type: object
      required:
        - email
        - username
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        username:
          type: string
          example: "SomeName"

    UpdateUserRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"

    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/User"

    UserResponseV2:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UserV2"

    UsersListResponse:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        pagination:
          $ref: "#/components/schemas/PaginationInfo"

    UsersListResponseV2:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/UserV2"
        pagination:
          $ref: "#/components/schemas/PaginationInfo"

    PaginationInfo:
      type: object
      required:
        - total
        - page
        - limit
        - total_pages
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 50
        total_pages:
          type: integer
          example: 2
    

    Error:
      type: object
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Incorrect data"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Incorrect format of email"

  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: "VALIDATION_ERROR"
            message: "Incorrect request data"
            details:
              - field: "email"
                message: "Incorrect email data"

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: "USER_NOT_FOUND"
            message: "User not found"
            details: []

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: "UNAUTHORIZED"
            message: "Need to authorization"
            details: []

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT

security:
  - BearerAuth: []
